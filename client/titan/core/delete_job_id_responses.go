package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/iron-io/titan/runner/client/models"
)

// DeleteJobIDReader is a Reader for the DeleteJobID structure.
type DeleteJobIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *DeleteJobIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteJobIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewDeleteJobIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteJobIDOK creates a DeleteJobIDOK with default headers values
func NewDeleteJobIDOK() *DeleteJobIDOK {
	return &DeleteJobIDOK{}
}

/*DeleteJobIDOK handles this case with default header values.

Job successfully deleted. Deletion succeeds even on jobs that do not exist.
*/
type DeleteJobIDOK struct {
}

func (o *DeleteJobIDOK) Error() string {
	return fmt.Sprintf("[DELETE /job/{id}][%d] deleteJobIdOK ", 200)
}

func (o *DeleteJobIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteJobIDConflict creates a DeleteJobIDConflict with default headers values
func NewDeleteJobIDConflict() *DeleteJobIDConflict {
	return &DeleteJobIDConflict{}
}

/*DeleteJobIDConflict handles this case with default header values.

Job is not in a valid state to delete.
*/
type DeleteJobIDConflict struct {
	Payload *models.IDStatus
}

func (o *DeleteJobIDConflict) Error() string {
	return fmt.Sprintf("[DELETE /job/{id}][%d] deleteJobIdConflict  %+v", 409, o.Payload)
}

func (o *DeleteJobIDConflict) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IDStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
