package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new core API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for core API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteJobID deletes the job

Delete only succeeds if job status is one of `succeeded
| failed | cancelled`. Cancel a job if it is another state and needs to
be deleted.  All information about the job, including the log, is
irretrievably lost when this is invoked.

*/
func (a *Client) DeleteJobID(params *DeleteJobIDParams) (*DeleteJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteJobID",
		Method:             "DELETE",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteJobIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteJobIDOK), nil
}

/*
GetJobID gets job by id

Gets a job by id.
*/
func (a *Client) GetJobID(params *GetJobIDParams) (*GetJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetJobID",
		Method:             "GET",
		PathPattern:        "/job/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobIDOK), nil
}

/*
GetJobsConsume gets next job

Gets the next job in the queue, ready for processing. Titan may return <=n jobs. Consumers should start processing jobs in order. Each returned job is set to `status` "running" and `started_at` is set to the current time. No other consumer can retrieve this job.
*/
func (a *Client) GetJobsConsume(params *GetJobsConsumeParams) (*GetJobsConsumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobsConsumeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetJobsConsume",
		Method:             "GET",
		PathPattern:        "/jobs/consume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetJobsConsumeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobsConsumeOK), nil
}

/*
PostJobs enqueues job

Enqueues job(s). If any of the jobs is invalid, none of the jobs are enqueued.

*/
func (a *Client) PostJobs(params *PostJobsParams) (*PostJobsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostJobsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostJobs",
		Method:             "POST",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostJobsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostJobsCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
