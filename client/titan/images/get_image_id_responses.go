package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/iron-io/titan/runner/client/models"
)

// GetImageIDReader is a Reader for the GetImageID structure.
type GetImageIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetImageIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetImageIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetImageIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetImageIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetImageIDOK creates a GetImageIDOK with default headers values
func NewGetImageIDOK() *GetImageIDOK {
	return &GetImageIDOK{}
}

/*GetImageIDOK handles this case with default header values.

Image details and stats.
*/
type GetImageIDOK struct {
	Payload *models.ImageWrapper
}

func (o *GetImageIDOK) Error() string {
	return fmt.Sprintf("[GET /image/{id}][%d] getImageIdOK  %+v", 200, o.Payload)
}

func (o *GetImageIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ImageWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageIDNotFound creates a GetImageIDNotFound with default headers values
func NewGetImageIDNotFound() *GetImageIDNotFound {
	return &GetImageIDNotFound{}
}

/*GetImageIDNotFound handles this case with default header values.

Image with ID does not exist.
*/
type GetImageIDNotFound struct {
	Payload *models.Error
}

func (o *GetImageIDNotFound) Error() string {
	return fmt.Sprintf("[GET /image/{id}][%d] getImageIdNotFound  %+v", 404, o.Payload)
}

func (o *GetImageIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageIDDefault creates a GetImageIDDefault with default headers values
func NewGetImageIDDefault(code int) *GetImageIDDefault {
	return &GetImageIDDefault{
		_statusCode: code,
	}
}

/*GetImageIDDefault handles this case with default header values.

Unexpected error
*/
type GetImageIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get image ID default response
func (o *GetImageIDDefault) Code() int {
	return o._statusCode
}

func (o *GetImageIDDefault) Error() string {
	return fmt.Sprintf("[GET /image/{id}][%d] GetImageID default  %+v", o._statusCode, o.Payload)
}

func (o *GetImageIDDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
