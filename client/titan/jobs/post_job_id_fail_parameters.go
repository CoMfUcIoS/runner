package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"os"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewPostJobIDFailParams creates a new PostJobIDFailParams object
// with the default values initialized.
func NewPostJobIDFailParams() *PostJobIDFailParams {
	var ()
	return &PostJobIDFailParams{}
}

/*PostJobIDFailParams contains all the parameters to send to the API endpoint
for the post job ID fail operation typically these are written to a http.Request
*/
type PostJobIDFailParams struct {

	/*Details
	  Details of job failure.

	*/
	Details string
	/*ID
	  Job id

	*/
	ID string
	/*Log
	  Output log for the job. Content-Type must be "text/plain; charset=utf-8".

	*/
	Log os.File
	/*Reason
	  Reason for job failure.

	*/
	Reason string
}

// WithDetails adds the details to the post job ID fail params
func (o *PostJobIDFailParams) WithDetails(details string) *PostJobIDFailParams {
	o.Details = details
	return o
}

// WithID adds the id to the post job ID fail params
func (o *PostJobIDFailParams) WithID(id string) *PostJobIDFailParams {
	o.ID = id
	return o
}

// WithLog adds the log to the post job ID fail params
func (o *PostJobIDFailParams) WithLog(log os.File) *PostJobIDFailParams {
	o.Log = log
	return o
}

// WithReason adds the reason to the post job ID fail params
func (o *PostJobIDFailParams) WithReason(reason string) *PostJobIDFailParams {
	o.Reason = reason
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostJobIDFailParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// form param details
	frDetails := o.Details
	fDetails := frDetails
	if fDetails != "" {
		if err := r.SetFormParam("details", fDetails); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form file param log
	if err := r.SetFileParam("log", &o.Log); err != nil {
		return err
	}

	// form param reason
	frReason := o.Reason
	fReason := frReason
	if fReason != "" {
		if err := r.SetFormParam("reason", fReason); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
