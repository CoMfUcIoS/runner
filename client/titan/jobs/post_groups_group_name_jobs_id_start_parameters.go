package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/iron-io/titan/runner/client/models"
)

// NewPostGroupsGroupNameJobsIDStartParams creates a new PostGroupsGroupNameJobsIDStartParams object
// with the default values initialized.
func NewPostGroupsGroupNameJobsIDStartParams() *PostGroupsGroupNameJobsIDStartParams {
	var ()
	return &PostGroupsGroupNameJobsIDStartParams{}
}

/*PostGroupsGroupNameJobsIDStartParams contains all the parameters to send to the API endpoint
for the post groups group name jobs ID start operation typically these are written to a http.Request
*/
type PostGroupsGroupNameJobsIDStartParams struct {

	/*Body*/
	Body *models.Start
	/*GroupName
	  Name of group for this set of jobs.

	*/
	GroupName string
	/*ID
	  Job id

	*/
	ID string
}

// WithBody adds the body to the post groups group name jobs ID start params
func (o *PostGroupsGroupNameJobsIDStartParams) WithBody(body *models.Start) *PostGroupsGroupNameJobsIDStartParams {
	o.Body = body
	return o
}

// WithGroupName adds the groupName to the post groups group name jobs ID start params
func (o *PostGroupsGroupNameJobsIDStartParams) WithGroupName(groupName string) *PostGroupsGroupNameJobsIDStartParams {
	o.GroupName = groupName
	return o
}

// WithID adds the id to the post groups group name jobs ID start params
func (o *PostGroupsGroupNameJobsIDStartParams) WithID(id string) *PostGroupsGroupNameJobsIDStartParams {
	o.ID = id
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostGroupsGroupNameJobsIDStartParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.Body == nil {
		o.Body = new(models.Start)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param group_name
	if err := r.SetPathParam("group_name", o.GroupName); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
