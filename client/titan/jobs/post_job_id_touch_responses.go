package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/iron-io/titan/runner/client/models"
)

// PostJobIDTouchReader is a Reader for the PostJobIDTouch structure.
type PostJobIDTouchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostJobIDTouchReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostJobIDTouchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPostJobIDTouchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPostJobIDTouchConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostJobIDTouchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewPostJobIDTouchOK creates a PostJobIDTouchOK with default headers values
func NewPostJobIDTouchOK() *PostJobIDTouchOK {
	return &PostJobIDTouchOK{}
}

/*PostJobIDTouchOK handles this case with default header values.

Job timeout was reset.
*/
type PostJobIDTouchOK struct {
}

func (o *PostJobIDTouchOK) Error() string {
	return fmt.Sprintf("[POST /job/{id}/touch][%d] postJobIdTouchOK ", 200)
}

func (o *PostJobIDTouchOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostJobIDTouchNotFound creates a PostJobIDTouchNotFound with default headers values
func NewPostJobIDTouchNotFound() *PostJobIDTouchNotFound {
	return &PostJobIDTouchNotFound{}
}

/*PostJobIDTouchNotFound handles this case with default header values.

Job does not exist.
*/
type PostJobIDTouchNotFound struct {
	Payload *models.Error
}

func (o *PostJobIDTouchNotFound) Error() string {
	return fmt.Sprintf("[POST /job/{id}/touch][%d] postJobIdTouchNotFound  %+v", 404, o.Payload)
}

func (o *PostJobIDTouchNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJobIDTouchConflict creates a PostJobIDTouchConflict with default headers values
func NewPostJobIDTouchConflict() *PostJobIDTouchConflict {
	return &PostJobIDTouchConflict{}
}

/*PostJobIDTouchConflict handles this case with default header values.

Job is not in a valid state to touch. Check status.
*/
type PostJobIDTouchConflict struct {
	Payload *models.IDStatus
}

func (o *PostJobIDTouchConflict) Error() string {
	return fmt.Sprintf("[POST /job/{id}/touch][%d] postJobIdTouchConflict  %+v", 409, o.Payload)
}

func (o *PostJobIDTouchConflict) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IDStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJobIDTouchDefault creates a PostJobIDTouchDefault with default headers values
func NewPostJobIDTouchDefault(code int) *PostJobIDTouchDefault {
	return &PostJobIDTouchDefault{
		_statusCode: code,
	}
}

/*PostJobIDTouchDefault handles this case with default header values.

Unexpected error
*/
type PostJobIDTouchDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post job ID touch default response
func (o *PostJobIDTouchDefault) Code() int {
	return o._statusCode
}

func (o *PostJobIDTouchDefault) Error() string {
	return fmt.Sprintf("[POST /job/{id}/touch][%d] PostJobIDTouch default  %+v", o._statusCode, o.Payload)
}

func (o *PostJobIDTouchDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
