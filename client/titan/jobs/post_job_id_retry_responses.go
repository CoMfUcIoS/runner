package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/iron-io/titan/runner/client/models"
)

// PostJobIDRetryReader is a Reader for the PostJobIDRetry structure.
type PostJobIDRetryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostJobIDRetryReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostJobIDRetryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPostJobIDRetryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostJobIDRetryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewPostJobIDRetryOK creates a PostJobIDRetryOK with default headers values
func NewPostJobIDRetryOK() *PostJobIDRetryOK {
	return &PostJobIDRetryOK{}
}

/*PostJobIDRetryOK handles this case with default header values.

Retrying job. The new Job is returned.
*/
type PostJobIDRetryOK struct {
	Payload *models.JobWrapper
}

func (o *PostJobIDRetryOK) Error() string {
	return fmt.Sprintf("[POST /job/{id}/retry][%d] postJobIdRetryOK  %+v", 200, o.Payload)
}

func (o *PostJobIDRetryOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJobIDRetryConflict creates a PostJobIDRetryConflict with default headers values
func NewPostJobIDRetryConflict() *PostJobIDRetryConflict {
	return &PostJobIDRetryConflict{}
}

/*PostJobIDRetryConflict handles this case with default header values.

Job is not in a valid state to retry. Check status.
*/
type PostJobIDRetryConflict struct {
	Payload *models.IDStatus
}

func (o *PostJobIDRetryConflict) Error() string {
	return fmt.Sprintf("[POST /job/{id}/retry][%d] postJobIdRetryConflict  %+v", 409, o.Payload)
}

func (o *PostJobIDRetryConflict) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IDStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostJobIDRetryDefault creates a PostJobIDRetryDefault with default headers values
func NewPostJobIDRetryDefault(code int) *PostJobIDRetryDefault {
	return &PostJobIDRetryDefault{
		_statusCode: code,
	}
}

/*PostJobIDRetryDefault handles this case with default header values.

Unexpected error
*/
type PostJobIDRetryDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post job ID retry default response
func (o *PostJobIDRetryDefault) Code() int {
	return o._statusCode
}

func (o *PostJobIDRetryDefault) Error() string {
	return fmt.Sprintf("[POST /job/{id}/retry][%d] PostJobIDRetry default  %+v", o._statusCode, o.Payload)
}

func (o *PostJobIDRetryDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
