package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/iron-io/titan/runner/client/models"
)

// GetGroupsGroupNameJobsIDReader is a Reader for the GetGroupsGroupNameJobsID structure.
type GetGroupsGroupNameJobsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetGroupsGroupNameJobsIDReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetGroupsGroupNameJobsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetGroupsGroupNameJobsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetGroupsGroupNameJobsIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetGroupsGroupNameJobsIDOK creates a GetGroupsGroupNameJobsIDOK with default headers values
func NewGetGroupsGroupNameJobsIDOK() *GetGroupsGroupNameJobsIDOK {
	return &GetGroupsGroupNameJobsIDOK{}
}

/*GetGroupsGroupNameJobsIDOK handles this case with default header values.

Job information
*/
type GetGroupsGroupNameJobsIDOK struct {
	Payload *models.JobWrapper
}

func (o *GetGroupsGroupNameJobsIDOK) Error() string {
	return fmt.Sprintf("[GET /groups/{group_name}/jobs/{id}][%d] getGroupsGroupNameJobsIdOK  %+v", 200, o.Payload)
}

func (o *GetGroupsGroupNameJobsIDOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobWrapper)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsGroupNameJobsIDNotFound creates a GetGroupsGroupNameJobsIDNotFound with default headers values
func NewGetGroupsGroupNameJobsIDNotFound() *GetGroupsGroupNameJobsIDNotFound {
	return &GetGroupsGroupNameJobsIDNotFound{}
}

/*GetGroupsGroupNameJobsIDNotFound handles this case with default header values.

Job does not exist.
*/
type GetGroupsGroupNameJobsIDNotFound struct {
	Payload *models.Error
}

func (o *GetGroupsGroupNameJobsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /groups/{group_name}/jobs/{id}][%d] getGroupsGroupNameJobsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetGroupsGroupNameJobsIDNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupsGroupNameJobsIDDefault creates a GetGroupsGroupNameJobsIDDefault with default headers values
func NewGetGroupsGroupNameJobsIDDefault(code int) *GetGroupsGroupNameJobsIDDefault {
	return &GetGroupsGroupNameJobsIDDefault{
		_statusCode: code,
	}
}

/*GetGroupsGroupNameJobsIDDefault handles this case with default header values.

Unexpected error
*/
type GetGroupsGroupNameJobsIDDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get groups group name jobs ID default response
func (o *GetGroupsGroupNameJobsIDDefault) Code() int {
	return o._statusCode
}

func (o *GetGroupsGroupNameJobsIDDefault) Error() string {
	return fmt.Sprintf("[GET /groups/{group_name}/jobs/{id}][%d] GetGroupsGroupNameJobsID default  %+v", o._statusCode, o.Payload)
}

func (o *GetGroupsGroupNameJobsIDDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
