package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"os"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewPostJobIDSuccessParams creates a new PostJobIDSuccessParams object
// with the default values initialized.
func NewPostJobIDSuccessParams() *PostJobIDSuccessParams {
	var ()
	return &PostJobIDSuccessParams{}
}

/*PostJobIDSuccessParams contains all the parameters to send to the API endpoint
for the post job ID success operation typically these are written to a http.Request
*/
type PostJobIDSuccessParams struct {

	/*ID
	  Job id

	*/
	ID string
	/*Log
	  Output log for the job. Content-Type must be "text/plain; charset=utf-8".

	*/
	Log os.File
}

// WithID adds the id to the post job ID success params
func (o *PostJobIDSuccessParams) WithID(id string) *PostJobIDSuccessParams {
	o.ID = id
	return o
}

// WithLog adds the log to the post job ID success params
func (o *PostJobIDSuccessParams) WithLog(log os.File) *PostJobIDSuccessParams {
	o.Log = log
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostJobIDSuccessParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// form file param log
	if err := r.SetFileParam("log", &o.Log); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
