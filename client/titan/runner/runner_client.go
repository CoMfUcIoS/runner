package runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new runner API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runner API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
PostGroupsGroupNameJobsIDError marks job as failed

Job is marked as failed if it was in a valid state. Job's `finished_at` time is initialized.
*/
func (a *Client) PostGroupsGroupNameJobsIDError(params *PostGroupsGroupNameJobsIDErrorParams) (*PostGroupsGroupNameJobsIDErrorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGroupsGroupNameJobsIDErrorParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostGroupsGroupNameJobsIDError",
		Method:             "POST",
		PathPattern:        "/groups/{group_name}/jobs/{id}/error",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostGroupsGroupNameJobsIDErrorReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGroupsGroupNameJobsIDErrorOK), nil
}

/*
PostGroupsGroupNameJobsIDStart marks job as started ie status running

Job status is changed to 'running' if it was in a valid state before. Job's `started_at` time is initialized.
*/
func (a *Client) PostGroupsGroupNameJobsIDStart(params *PostGroupsGroupNameJobsIDStartParams) (*PostGroupsGroupNameJobsIDStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGroupsGroupNameJobsIDStartParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostGroupsGroupNameJobsIDStart",
		Method:             "POST",
		PathPattern:        "/groups/{group_name}/jobs/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostGroupsGroupNameJobsIDStartReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGroupsGroupNameJobsIDStartOK), nil
}

/*
PostGroupsGroupNameJobsIDSuccess marks job as succeeded

Job status is changed to succeeded if it was in a valid state before. Job's `completed_at` time is initialized.
*/
func (a *Client) PostGroupsGroupNameJobsIDSuccess(params *PostGroupsGroupNameJobsIDSuccessParams) (*PostGroupsGroupNameJobsIDSuccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGroupsGroupNameJobsIDSuccessParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostGroupsGroupNameJobsIDSuccess",
		Method:             "POST",
		PathPattern:        "/groups/{group_name}/jobs/{id}/success",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostGroupsGroupNameJobsIDSuccessReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostGroupsGroupNameJobsIDSuccessOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
