package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new groups API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for groups API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
GetGroups gets all group names

Get a list of all the groups in the system.
*/
func (a *Client) GetGroups(params *GetGroupsParams) (*GetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetGroups",
		Method:             "GET",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupsOK), nil
}

/*
GetGroupsName gets information for a group

This gives more details about a job group, such as statistics.
*/
func (a *Client) GetGroupsName(params *GetGroupsNameParams) (*GetGroupsNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetGroupsName",
		Method:             "GET",
		PathPattern:        "/groups/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGroupsNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupsNameOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
